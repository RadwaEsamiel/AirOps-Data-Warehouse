from random import randint, choice

cities = [
    "New York",
    "Los Angeles",
    "Chicago",
    "Houston",
    "Phoenix",
    "Philadelphia",
    "San Antonio",
    "San Diego",
    "Dallas",
    "San Jose",
    "Austin",
    "Jacksonville",
    "Fort Worth",
    "Columbus",
    "Charlotte",
    "Indianapolis",
    "San Francisco",
    "Seattle",
    "Denver",
    "Washington",
    "Boston",
    "El Paso",
    "Nashville",
    "Detroit",
    "Oklahoma City",
    "Portland",
    "Las Vegas",
    "Memphis",
    "Louisville",
    "Baltimore",
    "Milwaukee",
    "Albuquerque",
    "Tucson",
    "Fresno",
    "Sacramento",
    "Mesa",
    "Kansas City",
    "Atlanta",
    "Long Beach",
    "Colorado Springs",
    "Raleigh",
    "Miami",
    "Virginia Beach",
    "Omaha",
    "Oakland",
    "Minneapolis",
    "Tulsa",
    "Wichita",
    "New Orleans",
    "Arlington",
    "Cleveland",
    "Bakersfield",
    "Tampa",
    "Aurora",
    "Honolulu",
    "Anaheim",
    "Santa Ana",
    "Corpus Christi",
    "Riverside",
    "Lexington",
    "St. Louis",
    "Stockton",
    "Pittsburgh",
    "Saint Paul",
    "Anchorage",
    "Cincinnati",
    "Henderson",
    "Greensboro",
    "Plano",
    "Newark",
    "Toledo",
    "Lincoln",
    "Orlando",
    "Chula Vista",
    "Jersey City",
    "Chandler",
    "Fort Wayne",
    "Buffalo",
    "Durham",
    "St. Petersburg",
    "Irvine",
    "Laredo",
    "Lubbock",
    "Madison",
    "Gilbert",
    "Norfolk",
    "Reno",
    "Winston-Salem",
    "Glendale",
    "Hialeah",
    "Garland",
    "Scottsdale",
    "Irving",
    "Chesapeake",
    "North Las Vegas",
    "Fremont",
    "Baton Rouge",
    "Richmond",
    "Boise",
    "San Bernardino",
    "Spokane",
    "Birmingham",
    "Modesto",
    "Des Moines",
    "London",
    "Paris",
    "Madrid",
    "Berlin",
    "Rome",
    "Athens",
    "Moscow",
    "Vienna",
    "Amsterdam",
    "Brussels",
    "Lisbon",
    "Budapest",
    "Warsaw",
    "Stockholm",
    "Dublin",
    "Prague",
    "Copenhagen",
    "Oslo",
    "Helsinki",
    "Zurich",
    "Geneva",
    "Barcelona",
    "Milan",
    "Munich",
    "Frankfurt",
    "Hamburg",
    "Lyon",
    "Manchester",
    "Birmingham",
    "Edinburgh",
    "Glasgow",
    "Naples",
    "Venice",
    "Florence",
    "Turin",
    "Bologna",
    "Bratislava",
    "Belgrade",
    "Bucharest",
    "Sofia",
    "Zagreb",
    "Ljubljana",
    "Riga",
    "Vilnius",
    "Tallinn",
    "Reykjavik",
    "Dubrovnik",
    "Split",
    "Krakow",
    "Gdansk",
    "Poznan",
    "Wroclaw",
    "Belfast",
    "Cardiff",
    "Aberdeen",
    "Stuttgart",
    "Dusseldorf",
    "Cologne",
    "Hannover",
    "Leipzig",
    "Dresden",
    "Dortmund",
    "Nuremberg",
    "Bremen",
    "Essen",
    "Bilbao",
    "Seville",
    "Valencia",
    "Palma",
    "Malaga",
    "Alicante",
    "Marseille",
    "Nice",
    "Toulouse",
    "Nantes",
    "Strasbourg",
    "Montpellier",
    "Bordeaux",
    "Lille",
    "Athens",
    "Thessaloniki",
    "Patras",
    "Heraklion",
    "Rhodes",
    "Santorini",
    "Mykonos",
    "Chania",
    "Crete",
    "Corfu",
    "Kos",
    "Samos",
    "Mytilene",
    "Skiathos",
    "Zante",
    "Corfu",
    "Budva",
    "Podgorica",
    "Kotor",
    "Tivat",
    "Split",
    "Dubrovnik",
    "Rovinj",
    "Zadar",
    "Tokyo",
    "Shanghai",
    "Mumbai",
    "Delhi",
    "Beijing",
    "Dhaka",
    "Osaka",
    "Karachi",
    "Chongqing",
    "Istanbul",
    "Seoul",
    "Guangzhou",
    "Lahore",
    "Shenzhen",
    "Jakarta",
    "Bangkok",
    "Chennai",
    "Lagos",
    "Hyderabad",
    "Bengaluru",
    "New Taipei City",
    "Kolkata",
    "Ho Chi Minh City",
    "Taipei",
    "Wuhan",
    "Tianjin",
    "Suzhou",
    "Ahmedabad",
    "Kuala Lumpur",
    "Hangzhou",
    "Riyadh",
    "Singapore",
    "Pune",
    "Baghdad",
    "Nagoya",
    "Ankara",
    "Ho Chi Minh City",
    "Nanjing",
    "Shenyang",
    "Chengdu",
    "Hong Kong",
    "Jeddah",
    "Pyongyang",
    "Busan",
    "Kochi",
    "Fukuoka",
    "Karaj",
    "Yokohama",
    "Tehran",
    "Surat",
    "Riyadh",
    "Shiraz",
    "Kolkata",
    "Gujranwala",
    "Rawalpindi",
    "Ulsan",
    "Hanoi",
    "Quanzhou",
    "Kuwait City",
    "Dubai",
    "Sharjah",
    "Kathmandu",
    "Agra",
    "Islamabad",
    "Kanpur",
    "Jaipur",
    "Doha",
    "Hiroshima",
    "Chiba",
    "Muscat",
    "Faisalabad",
    "Taichung",
    "Nagpur",
    "Amman",
    "Tashkent",
    "Damascus",
    "Homs",
    "Izmir",
    "Daejeon",
    "Sapporo",
    "Mashhad",
    "Shiraz",
    "Kumamoto",
    "Makassar",
    "Semarang",
    "Manila",
    "Guwahati",
    "Multan",
    "Peshawar",
    "Yangon",
    "Naypyidaw",
    "Lahore",
    "Baku",
    "Hanoi",
    "Colombo",
    "Chittagong",
    "Bhopal",
    "Patna",
    "Kochi"
]


def generate_insert(city_pair_route_key, directional_route_name, non_directional_route_name, route_distance_in_miles, route_distance_band, dom_intl_indicator, transocean_indicator):
    insert_statement = f"INSERT INTO dim_city_pair_route VALUES ({city_pair_route_key}, '{directional_route_name}', '{non_directional_route_name}', {route_distance_in_miles}, '{route_distance_band}', '{dom_intl_indicator}', '{transocean_indicator}');\n"
    return insert_statement

# Generate insert statements for cities
with open('populate_city_pair_route.SQL', 'w') as data:
    for i, city in enumerate(cities, start=1):
        other_cities = [c for c in cities if c != city]
        for other_city in other_cities:
            directional_route_name = f"{city} to {other_city}"
            non_directional_route_name = f"{city} - {other_city}"
            route_distance_in_miles = randint(100, 2000)
            route_distance_band = "Short" if route_distance_in_miles <= 500 else "Medium" if route_distance_in_miles <= 1000 else "Long"
            dom_intl_indicator = "Domestic" if choice([True, False]) else "International"
            transocean_indicator = choice(["Yes", "No"])
            insert_statement = generate_insert('1', directional_route_name, non_directional_route_name, route_distance_in_miles, route_distance_band, dom_intl_indicator, transocean_indicator)
            data.write(insert_statement)
        



